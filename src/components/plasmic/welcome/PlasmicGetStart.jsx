// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 23Xw4ATF9gEcg5TJuhoYHT
// Component: 6sTX6TCPHl
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_welcome.module.css"; // plasmic-import: 23Xw4ATF9gEcg5TJuhoYHT/projectcss
import sty from "./PlasmicGetStart.module.css"; // plasmic-import: 6sTX6TCPHl/css
import UserIcon from "./icons/PlasmicIcon__User"; // plasmic-import: EvVaHKD2mA/icon
import EnvelopeSimpleIcon from "./icons/PlasmicIcon__EnvelopeSimple"; // plasmic-import: GQrinbJIOU/icon
import LockKeyIcon from "./icons/PlasmicIcon__LockKey"; // plasmic-import: d5X2KjJLms/icon

export const PlasmicGetStart__VariantProps = new Array();

export const PlasmicGetStart__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    await promise;
  });

function PlasmicGetStart__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"signUpDesktop"}
            data-plasmic-override={overrides.signUpDesktop}
            hasGap={true}
            className={classNames(projectcss.all, sty.signUpDesktop)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"createAccountScreen"}
              data-plasmic-override={overrides.createAccountScreen}
              hasGap={true}
              className={classNames(projectcss.all, sty.createAccountScreen)}
            >
              <div
                data-plasmic-name={"imagePlaceholder"}
                data-plasmic-override={overrides.imagePlaceholder}
                className={classNames(projectcss.all, sty.imagePlaceholder)}
              />

              <p.Stack
                as={"div"}
                data-plasmic-name={"headSubheadTypeform"}
                data-plasmic-override={overrides.headSubheadTypeform}
                hasGap={true}
                className={classNames(projectcss.all, sty.headSubheadTypeform)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"headSubhead"}
                  data-plasmic-override={overrides.headSubhead}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.headSubhead)}
                >
                  <div
                    data-plasmic-name={"headline"}
                    data-plasmic-override={overrides.headline}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.headline
                    )}
                  >
                    {"Create Account"}
                  </div>

                  <div
                    data-plasmic-name={"subhead"}
                    data-plasmic-override={overrides.subhead}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.subhead
                    )}
                  >
                    {
                      "Go ahead and sign up, let everyone know how awesome you are!"
                    }
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"typeformsCtAs"}
                  data-plasmic-override={overrides.typeformsCtAs}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.typeformsCtAs)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"typeforms"}
                    data-plasmic-override={overrides.typeforms}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.typeforms)}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"typeForm"}
                      data-plasmic-override={overrides.typeForm}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.typeForm)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"icon"}
                        data-plasmic-override={overrides.icon}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.icon)}
                      >
                        <UserIcon
                          className={classNames(projectcss.all, sty.svg__tsYkZ)}
                          role={"img"}
                        />

                        <div
                          data-plasmic-name={"divider"}
                          data-plasmic-override={overrides.divider}
                          className={classNames(projectcss.all, sty.divider)}
                        />
                      </p.Stack>

                      <div
                        data-plasmic-name={"username"}
                        data-plasmic-override={overrides.username}
                        className={classNames(projectcss.all, sty.username)}
                      >
                        <div
                          data-plasmic-name={"text"}
                          data-plasmic-override={overrides.text}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text
                          )}
                        >
                          {"Username"}
                        </div>
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"typeForm2"}
                      data-plasmic-override={overrides.typeForm2}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.typeForm2)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"icon2"}
                        data-plasmic-override={overrides.icon2}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.icon2)}
                      >
                        <EnvelopeSimpleIcon
                          className={classNames(projectcss.all, sty.svg__oxRp)}
                          role={"img"}
                        />

                        <div
                          data-plasmic-name={"divider2"}
                          data-plasmic-override={overrides.divider2}
                          className={classNames(projectcss.all, sty.divider2)}
                        />
                      </p.Stack>

                      <div
                        data-plasmic-name={"username2"}
                        data-plasmic-override={overrides.username2}
                        className={classNames(projectcss.all, sty.username2)}
                      >
                        <div
                          data-plasmic-name={"username3"}
                          data-plasmic-override={overrides.username3}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.username3
                          )}
                        >
                          {"Email"}
                        </div>
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"typeForm3"}
                      data-plasmic-override={overrides.typeForm3}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.typeForm3)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"icon3"}
                        data-plasmic-override={overrides.icon3}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.icon3)}
                      >
                        <LockKeyIcon
                          className={classNames(projectcss.all, sty.svg__zyhgr)}
                          role={"img"}
                        />

                        <div
                          data-plasmic-name={"divider3"}
                          data-plasmic-override={overrides.divider3}
                          className={classNames(projectcss.all, sty.divider3)}
                        />
                      </p.Stack>

                      <div
                        data-plasmic-name={"username4"}
                        data-plasmic-override={overrides.username4}
                        className={classNames(projectcss.all, sty.username4)}
                      >
                        <div
                          data-plasmic-name={"username5"}
                          data-plasmic-override={overrides.username5}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.username5
                          )}
                        >
                          {"Password"}
                        </div>
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"typeForm4"}
                      data-plasmic-override={overrides.typeForm4}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.typeForm4)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"icon4"}
                        data-plasmic-override={overrides.icon4}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.icon4)}
                      >
                        <LockKeyIcon
                          className={classNames(projectcss.all, sty.svg__vqD4U)}
                          role={"img"}
                        />

                        <div
                          data-plasmic-name={"divider4"}
                          data-plasmic-override={overrides.divider4}
                          className={classNames(projectcss.all, sty.divider4)}
                        />
                      </p.Stack>

                      <div
                        data-plasmic-name={"username6"}
                        data-plasmic-override={overrides.username6}
                        className={classNames(projectcss.all, sty.username6)}
                      >
                        <div
                          data-plasmic-name={"username7"}
                          data-plasmic-override={overrides.username7}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.username7
                          )}
                        >
                          {"Confirm password"}
                        </div>
                      </div>
                    </p.Stack>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"ctAs"}
                    data-plasmic-override={overrides.ctAs}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.ctAs)}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"button"}
                      data-plasmic-override={overrides.button}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.button)}
                    >
                      <div
                        data-plasmic-name={"getStarted"}
                        data-plasmic-override={overrides.getStarted}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.getStarted
                        )}
                      >
                        {"Create Account"}
                      </div>
                    </p.Stack>
                  </p.Stack>
                </p.Stack>
              </p.Stack>
            </p.Stack>
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "signUpDesktop",
    "createAccountScreen",
    "imagePlaceholder",
    "headSubheadTypeform",
    "headSubhead",
    "headline",
    "subhead",
    "typeformsCtAs",
    "typeforms",
    "typeForm",
    "icon",
    "divider",
    "username",
    "text",
    "typeForm2",
    "icon2",
    "divider2",
    "username2",
    "username3",
    "typeForm3",
    "icon3",
    "divider3",
    "username4",
    "username5",
    "typeForm4",
    "icon4",
    "divider4",
    "username6",
    "username7",
    "ctAs",
    "button",
    "getStarted"
  ],

  signUpDesktop: [
    "signUpDesktop",
    "createAccountScreen",
    "imagePlaceholder",
    "headSubheadTypeform",
    "headSubhead",
    "headline",
    "subhead",
    "typeformsCtAs",
    "typeforms",
    "typeForm",
    "icon",
    "divider",
    "username",
    "text",
    "typeForm2",
    "icon2",
    "divider2",
    "username2",
    "username3",
    "typeForm3",
    "icon3",
    "divider3",
    "username4",
    "username5",
    "typeForm4",
    "icon4",
    "divider4",
    "username6",
    "username7",
    "ctAs",
    "button",
    "getStarted"
  ],

  createAccountScreen: [
    "createAccountScreen",
    "imagePlaceholder",
    "headSubheadTypeform",
    "headSubhead",
    "headline",
    "subhead",
    "typeformsCtAs",
    "typeforms",
    "typeForm",
    "icon",
    "divider",
    "username",
    "text",
    "typeForm2",
    "icon2",
    "divider2",
    "username2",
    "username3",
    "typeForm3",
    "icon3",
    "divider3",
    "username4",
    "username5",
    "typeForm4",
    "icon4",
    "divider4",
    "username6",
    "username7",
    "ctAs",
    "button",
    "getStarted"
  ],

  imagePlaceholder: ["imagePlaceholder"],
  headSubheadTypeform: [
    "headSubheadTypeform",
    "headSubhead",
    "headline",
    "subhead",
    "typeformsCtAs",
    "typeforms",
    "typeForm",
    "icon",
    "divider",
    "username",
    "text",
    "typeForm2",
    "icon2",
    "divider2",
    "username2",
    "username3",
    "typeForm3",
    "icon3",
    "divider3",
    "username4",
    "username5",
    "typeForm4",
    "icon4",
    "divider4",
    "username6",
    "username7",
    "ctAs",
    "button",
    "getStarted"
  ],

  headSubhead: ["headSubhead", "headline", "subhead"],
  headline: ["headline"],
  subhead: ["subhead"],
  typeformsCtAs: [
    "typeformsCtAs",
    "typeforms",
    "typeForm",
    "icon",
    "divider",
    "username",
    "text",
    "typeForm2",
    "icon2",
    "divider2",
    "username2",
    "username3",
    "typeForm3",
    "icon3",
    "divider3",
    "username4",
    "username5",
    "typeForm4",
    "icon4",
    "divider4",
    "username6",
    "username7",
    "ctAs",
    "button",
    "getStarted"
  ],

  typeforms: [
    "typeforms",
    "typeForm",
    "icon",
    "divider",
    "username",
    "text",
    "typeForm2",
    "icon2",
    "divider2",
    "username2",
    "username3",
    "typeForm3",
    "icon3",
    "divider3",
    "username4",
    "username5",
    "typeForm4",
    "icon4",
    "divider4",
    "username6",
    "username7"
  ],

  typeForm: ["typeForm", "icon", "divider", "username", "text"],
  icon: ["icon", "divider"],
  divider: ["divider"],
  username: ["username", "text"],
  text: ["text"],
  typeForm2: ["typeForm2", "icon2", "divider2", "username2", "username3"],
  icon2: ["icon2", "divider2"],
  divider2: ["divider2"],
  username2: ["username2", "username3"],
  username3: ["username3"],
  typeForm3: ["typeForm3", "icon3", "divider3", "username4", "username5"],
  icon3: ["icon3", "divider3"],
  divider3: ["divider3"],
  username4: ["username4", "username5"],
  username5: ["username5"],
  typeForm4: ["typeForm4", "icon4", "divider4", "username6", "username7"],
  icon4: ["icon4", "divider4"],
  divider4: ["divider4"],
  username6: ["username6", "username7"],
  username7: ["username7"],
  ctAs: ["ctAs", "button", "getStarted"],
  button: ["button", "getStarted"],
  getStarted: ["getStarted"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicGetStart__ArgProps,
          internalVariantPropNames: PlasmicGetStart__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicGetStart__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicGetStart";
  } else {
    func.displayName = `PlasmicGetStart.${nodeName}`;
  }
  return func;
}

export const PlasmicGetStart = Object.assign(
  // Top-level PlasmicGetStart renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    signUpDesktop: makeNodeComponent("signUpDesktop"),
    createAccountScreen: makeNodeComponent("createAccountScreen"),
    imagePlaceholder: makeNodeComponent("imagePlaceholder"),
    headSubheadTypeform: makeNodeComponent("headSubheadTypeform"),
    headSubhead: makeNodeComponent("headSubhead"),
    headline: makeNodeComponent("headline"),
    subhead: makeNodeComponent("subhead"),
    typeformsCtAs: makeNodeComponent("typeformsCtAs"),
    typeforms: makeNodeComponent("typeforms"),
    typeForm: makeNodeComponent("typeForm"),
    icon: makeNodeComponent("icon"),
    divider: makeNodeComponent("divider"),
    username: makeNodeComponent("username"),
    text: makeNodeComponent("text"),
    typeForm2: makeNodeComponent("typeForm2"),
    icon2: makeNodeComponent("icon2"),
    divider2: makeNodeComponent("divider2"),
    username2: makeNodeComponent("username2"),
    username3: makeNodeComponent("username3"),
    typeForm3: makeNodeComponent("typeForm3"),
    icon3: makeNodeComponent("icon3"),
    divider3: makeNodeComponent("divider3"),
    username4: makeNodeComponent("username4"),
    username5: makeNodeComponent("username5"),
    typeForm4: makeNodeComponent("typeForm4"),
    icon4: makeNodeComponent("icon4"),
    divider4: makeNodeComponent("divider4"),
    username6: makeNodeComponent("username6"),
    username7: makeNodeComponent("username7"),
    ctAs: makeNodeComponent("ctAs"),
    button: makeNodeComponent("button"),
    getStarted: makeNodeComponent("getStarted"),
    // Metadata about props expected for PlasmicGetStart
    internalVariantProps: PlasmicGetStart__VariantProps,
    internalArgProps: PlasmicGetStart__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicGetStart;
/* prettier-ignore-end */
