// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 23Xw4ATF9gEcg5TJuhoYHT
// Component: 3-u3t_yJ9W8O
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_welcome.module.css"; // plasmic-import: 23Xw4ATF9gEcg5TJuhoYHT/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: 3-u3t_yJ9W8O/css

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    await promise;
  });

function PlasmicHomepage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"welcomeScreenDesktop"}
            data-plasmic-override={overrides.welcomeScreenDesktop}
            hasGap={true}
            className={classNames(projectcss.all, sty.welcomeScreenDesktop)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"welcomeScreen"}
              data-plasmic-override={overrides.welcomeScreen}
              hasGap={true}
              className={classNames(projectcss.all, sty.welcomeScreen)}
            >
              <div
                data-plasmic-name={"imagePlaceholder"}
                data-plasmic-override={overrides.imagePlaceholder}
                className={classNames(projectcss.all, sty.imagePlaceholder)}
              />

              <p.Stack
                as={"div"}
                data-plasmic-name={"headSubheadCtAs"}
                data-plasmic-override={overrides.headSubheadCtAs}
                hasGap={true}
                className={classNames(projectcss.all, sty.headSubheadCtAs)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"headSubhead"}
                  data-plasmic-override={overrides.headSubhead}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.headSubhead)}
                >
                  <div
                    data-plasmic-name={"headline"}
                    data-plasmic-override={overrides.headline}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.headline
                    )}
                  >
                    {"Welcome"}
                  </div>

                  <div
                    data-plasmic-name={"subhead"}
                    data-plasmic-override={overrides.subhead}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.subhead
                    )}
                  >
                    {"We’re glad you’re here! Sign up to start"}
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"ctAs"}
                  data-plasmic-override={overrides.ctAs}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.ctAs)}
                >
                  <p.Stack
                    as={"a"}
                    data-plasmic-name={"button"}
                    data-plasmic-override={overrides.button}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.button
                    )}
                    href={`/get-start`}
                  >
                    <div
                      data-plasmic-name={"text"}
                      data-plasmic-override={overrides.text}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text
                      )}
                    >
                      {"Get Started"}
                    </div>
                  </p.Stack>
                </p.Stack>
              </p.Stack>
            </p.Stack>
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "welcomeScreenDesktop",
    "welcomeScreen",
    "imagePlaceholder",
    "headSubheadCtAs",
    "headSubhead",
    "headline",
    "subhead",
    "ctAs",
    "button",
    "text"
  ],

  welcomeScreenDesktop: [
    "welcomeScreenDesktop",
    "welcomeScreen",
    "imagePlaceholder",
    "headSubheadCtAs",
    "headSubhead",
    "headline",
    "subhead",
    "ctAs",
    "button",
    "text"
  ],

  welcomeScreen: [
    "welcomeScreen",
    "imagePlaceholder",
    "headSubheadCtAs",
    "headSubhead",
    "headline",
    "subhead",
    "ctAs",
    "button",
    "text"
  ],

  imagePlaceholder: ["imagePlaceholder"],
  headSubheadCtAs: [
    "headSubheadCtAs",
    "headSubhead",
    "headline",
    "subhead",
    "ctAs",
    "button",
    "text"
  ],

  headSubhead: ["headSubhead", "headline", "subhead"],
  headline: ["headline"],
  subhead: ["subhead"],
  ctAs: ["ctAs", "button", "text"],
  button: ["button", "text"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    welcomeScreenDesktop: makeNodeComponent("welcomeScreenDesktop"),
    welcomeScreen: makeNodeComponent("welcomeScreen"),
    imagePlaceholder: makeNodeComponent("imagePlaceholder"),
    headSubheadCtAs: makeNodeComponent("headSubheadCtAs"),
    headSubhead: makeNodeComponent("headSubhead"),
    headline: makeNodeComponent("headline"),
    subhead: makeNodeComponent("subhead"),
    ctAs: makeNodeComponent("ctAs"),
    button: makeNodeComponent("button"),
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
